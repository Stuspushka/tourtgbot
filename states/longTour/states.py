from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import re
from decimal import Decimal
from database import async_session
from crud.crud_longtour import create_long_tour, update_long_tour_by_name, delete_long_tour
from .models import AddLongTourState, EditLongTourState, DeleteLongTourState
from utils import parse_value
from keyboard import longtour_menu_keyboard, cancel_keyboard, confirm_longtour_delete_keyboard, \
    edit_longtour_fields_keyboard, main_menu_keyboard
from ..filters import NotCancelFilter

longtour_router = Router()


@longtour_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def start_add_longtour_button(message: Message, state: FSMContext):
    await state.set_state(AddLongTourState.name)
    await message.answer("–û–∫, –Ω–∞—á–Ω—ë–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=cancel_keyboard)


@longtour_router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É")
async def start_edit_longtour_button(message: Message, state: FSMContext):
    await state.set_state(EditLongTourState.choosing_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ç—É—Ä–∞ (name) –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=cancel_keyboard)


@longtour_router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def start_delete_longtour_button(message: Message, state: FSMContext):
    await state.set_state(DeleteLongTourState.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (name) —Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=cancel_keyboard)


@longtour_router.message(F.text, AddLongTourState.name, NotCancelFilter())
async def enter_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(AddLongTourState.customer)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞:", reply_markup=cancel_keyboard)


@longtour_router.message(F.text, AddLongTourState.customer, NotCancelFilter())
async def enter_customer(message: Message, state: FSMContext):
    await state.update_data(customer=message.text.strip())
    await state.set_state(AddLongTourState.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=cancel_keyboard)


@longtour_router.message(F.text, AddLongTourState.phone, NotCancelFilter())
async def enter_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await state.set_state(AddLongTourState.direction)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=cancel_keyboard)


@longtour_router.message(F.text, AddLongTourState.direction, NotCancelFilter())
async def enter_direction(message: Message, state: FSMContext):
    await state.update_data(direction=message.text.strip())
    await state.set_state(AddLongTourState.p_count)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):", reply_markup=cancel_keyboard)


@longtour_router.message(F.text, AddLongTourState.p_count, NotCancelFilter())
async def enter_p_count(message: Message, state: FSMContext):
    await state.update_data(p_count=message.text.strip())
    await state.set_state(AddLongTourState.bus)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ–±—É—Å:", reply_markup=cancel_keyboard)


@longtour_router.message(F.text, AddLongTourState.bus, NotCancelFilter())
async def enter_bus(message: Message, state: FSMContext):
    await state.update_data(bus=message.text.strip())
    await state.set_state(AddLongTourState.locations)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=cancel_keyboard)


@longtour_router.message(F.text, AddLongTourState.locations, NotCancelFilter())
async def enter_locations(message: Message, state: FSMContext):
    raw_locations = re.split(r'[, \n]+', message.text)
    locations = [loc.strip() for loc in raw_locations if loc.strip()]
    if not locations:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ª–æ–∫–∞—Ü–∏—é",
                             reply_markup=cancel_keyboard)
        return
    unique_locations = list(dict.fromkeys(locations))
    await state.update_data(locations=', '.join(unique_locations))
    await state.set_state(AddLongTourState.date)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):",
                         reply_markup=cancel_keyboard)


@longtour_router.message(F.text, AddLongTourState.date, NotCancelFilter())
async def enter_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text.strip(), "%Y-%m-%d").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                             reply_markup=cancel_keyboard)
        return
    await state.update_data(date=date)
    await state.set_state(AddLongTourState.total)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É (total):", reply_markup=cancel_keyboard)


@longtour_router.message(F.text, AddLongTourState.total, NotCancelFilter())
async def enter_total(message: Message, state: FSMContext):
    try:
        total = Decimal(message.text.strip())
    except Exception:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_keyboard)
        return
    await state.update_data(total=total)
    data = await state.get_data()
    async with async_session() as session:
        try:
            new_tour = await create_long_tour(session, data)
            await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID: {new_tour.id}", reply_markup=longtour_menu_keyboard)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞: {e}", reply_markup=longtour_menu_keyboard)

    await state.clear()


@longtour_router.message(DeleteLongTourState.name, NotCancelFilter())
async def ask_delete_confirmation(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: *{name}*?",
        parse_mode="Markdown",
        reply_markup=confirm_longtour_delete_keyboard
    )


@longtour_router.message(EditLongTourState.choosing_name, F.text)
async def show_edit_keyboard(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=edit_longtour_fields_keyboard(name)
    )
    await state.set_state(EditLongTourState.choosing_field)


@longtour_router.callback_query(F.data.startswith("edit_longtour:"))
async def handle_longtour_field_selection(callback: CallbackQuery, state: FSMContext):
    _, field, name = callback.data.split(":", 2)
    await state.update_data(field=field, name=name)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: *{field}*")
    await callback.answer()
    await state.set_state(EditLongTourState.entering_value)


@longtour_router.message(EditLongTourState.entering_value, F.text)
async def apply_longtour_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data["field"]
    name = data["name"]

    try:
        new_value = parse_value(field, message.text)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–ª—è –¥–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –¥–ª—è —Å—É–º–º—ã ‚Äî —á–∏—Å–ª–æ.")
        return

    async with async_session() as session:
        result = await update_long_tour_by_name(session, name, field, new_value)

    if result:
        await message.answer(f"‚úÖ –ü–æ–ª–µ *{field}* —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=longtour_menu_keyboard)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å. –¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
                             reply_markup=longtour_menu_keyboard)

    await state.clear()


@longtour_router.callback_query(F.data == "cancel_longtour_edit")
async def cancel_longtour_edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=longtour_menu_keyboard)
    await callback.answer()
    await state.clear()


@longtour_router.callback_query(F.data == "confirm_delete")
async def confirm_delete_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")

    async with async_session() as session:
        success = await delete_long_tour(session, name)

    if success:
        await callback.message.answer(f"‚úÖ –¢—É—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
                                      reply_markup=longtour_menu_keyboard)
    else:
        await callback.message.answer("‚ùå –¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.", reply_markup=longtour_menu_keyboard)

    await callback.answer()
    await state.clear()


@longtour_router.callback_query(F.data == "cancel_delete")
async def cancel_delete_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=longtour_menu_keyboard)
    await callback.answer()
    await state.clear()
