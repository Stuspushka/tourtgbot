from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from utils import parse_value
from database import async_session
from crud.crud_oneday import update_one_day_tour_by_booking_id, create_one_day_tour, delete_one_day_tour
from datetime import datetime
from .models import AddOneDayTourState, EditOneDayTourState, DeleteOneDayTourState
from keyboard import (oneday_menu_keyboard, confirm_oneday_delete_keyboard, cancel_keyboard, edit_oneday_fields_keyboard,
                      main_menu_keyboard)
from ..filters import NotCancelFilter

oneday_router = Router()


@oneday_router.message(Command("cancel"))
@oneday_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_menu_keyboard)
        return
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu_keyboard)
    await state.clear()


@oneday_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ–¥–Ω–µ–≤–∫—É")
async def start_add_from_button(message: Message, state: FSMContext):
    await message.answer("–û–∫, –Ω–∞—á–Ω—ë–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞. –í–≤–µ–¥–∏—Ç–µ booking_id:", reply_markup=cancel_keyboard)
    await state.set_state(AddOneDayTourState.booking_id)


@oneday_router.message(F.text == "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω–æ–¥–Ω–µ–≤–∫—É")
async def start_edit_from_button(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Booking ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=cancel_keyboard)
    await state.set_state(EditOneDayTourState.choosing_id)


@oneday_router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–¥–Ω–µ–≤–∫—É")
async def start_delete_from_button(message: Message, state: FSMContext):
    await state.set_state(DeleteOneDayTourState.booking_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id (booking_id) —Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=cancel_keyboard)


@oneday_router.message(AddOneDayTourState.booking_id, F.text, NotCancelFilter())
async def get_booking_id(message: Message, state: FSMContext):
    await state.update_data(booking_id=message.text.strip())
    await state.set_state(AddOneDayTourState.fio)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:", reply_markup=cancel_keyboard)


@oneday_router.message(AddOneDayTourState.fio, F.text, NotCancelFilter())
async def get_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text.strip())
    await state.set_state(AddOneDayTourState.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=cancel_keyboard)


@oneday_router.message(AddOneDayTourState.phone, F.text, NotCancelFilter())
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await state.set_state(AddOneDayTourState.operator)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=cancel_keyboard)


@oneday_router.message(AddOneDayTourState.operator, F.text, NotCancelFilter())
async def get_operator(message: Message, state: FSMContext):
    await state.update_data(operator=message.text.strip())
    await state.set_state(AddOneDayTourState.direction)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=cancel_keyboard)


@oneday_router.message(AddOneDayTourState.direction, F.text, NotCancelFilter())
async def get_direction(message: Message, state: FSMContext):
    await state.update_data(direction=message.text.strip())
    await state.set_state(AddOneDayTourState.date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):", reply_markup=cancel_keyboard)


@oneday_router.message(AddOneDayTourState.date, F.text, NotCancelFilter())
async def get_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text.strip(), "%Y-%m-%d").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:", reply_markup=cancel_keyboard)
        return
    await state.update_data(date=date)
    await state.set_state(AddOneDayTourState.paydate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–ø–ª–∞—Ç—ã (–ì–ì–ì–ì-–ú–ú-–î–î):", reply_markup=cancel_keyboard)


@oneday_router.message(AddOneDayTourState.paydate, F.text, NotCancelFilter())
async def get_paydate_and_save(message: Message, state: FSMContext):
    try:
        paydate = datetime.strptime(message.text.strip(), "%Y-%m-%d").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:", reply_markup=cancel_keyboard)
        return
    await state.update_data(paydate=paydate)
    data = await state.get_data()
    date = data.get("date")
    if date and paydate > date:
        await message.answer("–î–∞—Ç–∞ –¥–æ–ø–ª–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã —Ç—É—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             reply_markup=cancel_keyboard)
        return
    async with async_session() as session:
        try:
            new_tour = await create_one_day_tour(session, data)
            await message.answer(f"‚úÖ –¢—É—Ä –¥–æ–±–∞–≤–ª–µ–Ω! ID: {new_tour.id}", reply_markup=oneday_menu_keyboard)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}", reply_markup=oneday_menu_keyboard)
    await state.clear()


@oneday_router.message(EditOneDayTourState.choosing_id, F.text)
async def choose_field(message: Message, state: FSMContext):
    booking_id = message.text.strip()
    await state.update_data(booking_id=booking_id)

    keyboard = edit_oneday_fields_keyboard(booking_id)
    await message.answer(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–∞ —Å booking_id `{booking_id}`:",
        reply_markup=keyboard
    )

    await state.set_state(EditOneDayTourState.choosing_field)


@oneday_router.callback_query(F.data.startswith("edit_oneday"))
async def handle_edit_callback(callback: CallbackQuery, state: FSMContext):
    _, field, booking_id = callback.data.split(":", 2)

    await state.update_data(field=field, booking_id=booking_id)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è *{field}*:")

    await state.set_state(EditOneDayTourState.entering_value)
    await callback.answer()


@oneday_router.callback_query(F.data == "cancel_edit")
async def cancel_edit_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=oneday_menu_keyboard)
    await state.clear()
    await callback.answer()


@oneday_router.message(EditOneDayTourState.entering_value, F.text)
async def apply_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data["field"]
    booking_id = data["booking_id"]

    try:
        new_value = parse_value(field, message.text)
    except Exception:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–ª—è –¥–∞—Ç ‚Äî –ì–ì–ì–ì-–ú–ú-–î–î.")
        return

    async with async_session() as session:
        tour = await update_one_day_tour_by_booking_id(session, booking_id, field, new_value)
        if not tour:
            await message.answer("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º Booking ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=oneday_menu_keyboard)
        else:
            await message.answer(f"‚úÖ –ü–æ–ª–µ `{field}` –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=oneday_menu_keyboard)

    await state.clear()


@oneday_router.message(DeleteOneDayTourState.booking_id, NotCancelFilter())
async def ask_oneday_delete_confirmation(message: Message, state: FSMContext):
    booking_id = message.text.strip()
    await state.update_data(booking_id=booking_id)
    await message.answer(
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–π —Ç—É—Ä –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º *{booking_id}*?",
        reply_markup=confirm_oneday_delete_keyboard
    )


@oneday_router.callback_query(F.data == "confirm_oneday_delete")
async def confirm_oneday_delete(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    booking_id = data.get("booking_id")

    async with async_session() as session:
        success = await delete_one_day_tour(session, booking_id)

    if success:
        await callback.message.answer(f"‚úÖ –¢—É—Ä '{booking_id}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=oneday_menu_keyboard)
    else:
        await callback.message.answer("‚ùå –¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.", reply_markup=oneday_menu_keyboard)

    await state.clear()
    await callback.answer()


@oneday_router.callback_query(F.data == "cancel_oneday_delete")
async def cancel_oneday_delete(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=oneday_menu_keyboard)
    await state.clear()
    await callback.answer()
